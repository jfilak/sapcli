#!/usr/bin/env python3
# Author: Jakub Filak <jakub@thefilaks.net>
"""SAP Command Line tool"""

import os.path
import sys
import logging
from argparse import ArgumentParser
import getpass


import sap
import sap.cli
import sap.adt
import sap.rfc

# pylint: disable=invalid-name
log = sap.get_logger()


# pylint: disable=too-few-public-methods
class ExitCodes:
    """sys.exit() codes"""

    SUCCESS = 0
    # Do not use Shell Reserved Exit Codes
    SHELL_RESERVED_1 = 1
    SHELL_RESERVED_2 = 2
    # Use the first available Exit code
    INVALID_CONFIGURATION = 3


def report_args_error_and_exit(args, error):
    """Prints error to stderr and exits with coder reporting invalid
       paramters.
    """

    print(error, file=sys.stderr)
    args.print_help(sys.stderr)
    sys.exit(ExitCodes.INVALID_CONFIGURATION)


# pylint: disable=too-many-branches
def resolve_default_values(arg_parser, args):
    """Add default values to command line params"""

    if not args.ashost:
        args.ashost = os.getenv('SAP_ASHOST')

    if not args.ashost:
        report_args_error_and_exit(
            arg_parser,
            ': '.join(('No SAP Application Server Host name provided',
                       'use the option --ashost or the environment variable SAP_ASHOST')))

    if not args.client:
        args.client = os.getenv('SAP_CLIENT')

    if not args.client:
        report_args_error_and_exit(
            arg_parser,
            ': '.join(('No SAP Client provided',
                       'use the option --client or the environment variable SAP_CLIENT')))

    if not args.port:
        port = os.getenv('SAP_PORT')
        if port:
            args.port = int(port)
        else:
            args.port = 443

    if args.ssl is None:
        ssl = os.getenv('SAP_SSL')
        if ssl is not None:
            args.ssl = ssl.lower() not in ('n', 'no', 'false', 'off')
        else:
            args.ssl = True

    if args.verify is None:
        verify = os.getenv('SAP_SSL_VERIFY')
        if verify is not None:
            args.verify = verify.lower() not in ('n', 'no', 'false', 'off')
        else:
            args.verify = True

    if not args.user:
        args.user = os.getenv('SAP_USER')

    if not args.user:
        args.user = input('Login:')

    if not args.password:
        args.password = os.getenv('SAP_PASSWORD')

    if not args.password:
        args.password = getpass.getpass()


def parse_command_line(argv):
    """Parses command line arguments"""

    arg_parser = ArgumentParser(os.path.basename(argv[0]))
    arg_parser.add_argument(
        '-v', '--verbose', dest='verbose_count', action='count', default=0,
        help='make verbose output')
    arg_parser.add_argument(
        '--ashost', dest='ashost', type=str, default=None,
        help='Application Server address (DNS or IP)')
    arg_parser.add_argument(
        '--client', dest='client', type=str, default=None,
        help='Client (MANDT)')
    arg_parser.add_argument(
        '--no-ssl', dest='ssl', default=None, action='store_false',
        help='Switch from HTTPS to HTTP')
    arg_parser.add_argument(
        '--skip-ssl-validation', dest='verify', default=None, action='store_false',
        help='Skip validation of SSL server certificates')
    arg_parser.add_argument(
        '--port', dest='port', type=int, default=None,
        help='ADT HTTP port; default = 443')
    arg_parser.add_argument(
        '--user', dest='user', type=str, default=None,
        help='Logon user')
    arg_parser.add_argument(
        '--password', dest='password', type=str, default=None,
        help='Password')

    subparsers = arg_parser.add_subparsers()
    for connection, cmd in sap.cli.get_commands():
        cmd_args = subparsers.add_parser(cmd.name)
        cmd_args.set_defaults(command=cmd)
        cmd_args.set_defaults(connection_factory=connection)

        cmd.install_parser(cmd_args)

    args = arg_parser.parse_args(argv[1:])

    loglevel = max(3 - args.verbose_count, 0) * 10
    log.setLevel(loglevel)
    logging.debug('Logging level: %i', loglevel)

    resolve_default_values(arg_parser, args)

    return args


def main(argv):
    """Main function"""

    try:
        args = parse_command_line(argv)
        connection = args.connection_factory(args)
        return args.execute(connection, args)
    except KeyboardInterrupt:
        log.error('Program interrupted!')
    finally:
        logging.shutdown()


if __name__ == '__main__':
    sys.exit(main(sys.argv))
